# -*- coding: utf-8 -*-
"""Ml_project(placement).pynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/182q59r_z9wSErYUYR5wWiUqN1Ve_GTOE

**STEP OF MACHINE LEARNING**


1.   PREPROCESSING + EDA + FEATURE SELECTION
2.   EXTRACT INPUT AND OUTPUT COLUMNS
3. TRAIN TEST SPLIT 
4. TRAIN THE MODEL
5. EVALUATE THE MODEL/MODEL SELECTION 
6. DEPLOY THE MODEL
"""

#IMPORTING THE NECESSARY LIBRARIES
import numpy as np
import pandas as pd

#Reading the data 

data = pd.read_csv('/content/placement.csv')
data

data.head()

data.tail()

data.shape

data.shape[0]

#removing missing values
data.info()

"""here as you can see there are no null values.
so no data preprocessing required

"""

data.head()

data.info()

data = data.iloc[:,1:]
data

import matplotlib.pyplot as plt

plt.scatter(data['cgpa'],data['iq'],c = data['placement'])
#xaxis = cgpa , y axis = iq # colored the placement coloumnn

"""**Using LOGISTIC REGRESSION NAMED LOGISTIC REGRESSION. **

"""

#LOGISTIC REGRESSION BECAUSE THIS IS CLASSIFICATION PROBLEM

"""**Independent Variable = Input = cgpa & iq**
**dependent variable = output = Placement**
"""

x = data.iloc[:, 0:2]
y = data.iloc[:,-1]

x

y

#train test split first 
# then scale the values

from sklearn.model_selection import train_test_split
#train_test_split(inpdependant variable , dependent variable, give test size)
x_train,x_test, y_train, y_test = train_test_split(x,y,test_size = 0.1)

x_train

x_test

y_train

y_test

#scaling all values betweeen o and 1 
#it is not necessary but you should do it

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

x_train = scaler.fit_transform(x_train)
x_train

x_test = scaler.fit_transform(x_test)
x_test

"""**TRAIN  THE CLASSIFIER **

"""

from sklearn.linear_model import LogisticRegression

clf = LogisticRegression()

clf.fit(x_train, y_train)

y_pred = clf.predict(x_test)
y_pred

y_test

from sklearn.metrics import accuracy_score

accuracy_score(y_test,y_pred)

from mlxtend.plotting import plot_decision_regions
plot_decision_regions(x_train, y_train.values, clf = clf, legend=2)